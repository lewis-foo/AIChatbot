## Natural Language Toolkit: sem3.fcfg
##
## Alternative simple grammar with transitive verbs and
## quantifiers for the book.
##
## Author: Ewan Klein <ewan@inf.ed.ac.uk>
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT

## modified by Benjamin Inden, Nottingham Trent University

% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]
S[SEM = <?subj(?vp)>] -> IG[] NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

IG[] -> P[] IG[]
IG[] -> P[]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[NUM=?n,SEM=<?rel(?nom)> ] -> Noms[NUM=pl,SEM=[sem=?nom, some=?rel]]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]
Noms[NUM=?n,SEM=[sem=?nom, some=<\P Q.exists x.(P(x) & Q(x))>]] -> N[NUM=pl,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################
PropN[-LOC,NUM=sg,SEM=<\P.P(me)>] -> 'I'


Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all' | 'do'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'


N[NUM=pl,SEM=<\x.protons(x)>] -> 'protons'
N[NUM=sg,SEM=<\x.protons(x)>] -> 'proton'

N[NUM=pl,SEM=<\x.electrons(x)>] -> 'electrons'
N[NUM=sg,SEM=<\x.electrons(x)>] -> 'electron'

N[NUM=pl,SEM=<\x.neutrons(x)>] -> 'neutrons'
N[NUM=sg,SEM=<\x.neutrons(x)>] -> 'neutron'

N[NUM=pl,SEM=<\x.nucleus(x)>] -> 'nuclei'
N[NUM=sg,SEM=<\x.nucleus(x)>] -> 'nucleus'

N[NUM=pl,SEM=<\x.atoms(x)>] -> 'atoms'
N[NUM=sg,SEM=<\x.atoms(x)>] -> 'atom'

N[NUM=pl,SEM=<\x.up_quarks(x)>] -> 'up_quarks'
N[NUM=sg,SEM=<\x.up_quarks(x)>] -> 'up_quark'

N[NUM=sg,SEM=<\x.down_quarks(x)>] -> 'down_quark'
N[NUM=pl,SEM=<\x.down_quarks(x)>] -> 'down_quarks'

N[NUM=sg,SEM=<\x.charge(x)>] -> 'charge'

IV[NUM=sg,SEM=<\x.charged(x)>,TNS=pres] -> 'charged'

TV[NUM=sg,SEM=<\X x.X(\y.contains(x,y))>,TNS=pres] -> 'contains' | 'contain'| 'has'
TV[NUM=pl,SEM=<\X x.X(\y.contains(x,y))>,TNS=pres] -> 'contain' |'contains'| 'have'
TV[NUM=sg,SEM=<\X x.X(\y.likes(x,y))>,TNS=pres] -> 'like'
TV[NUM=pl,SEM=<\X x.X(\y.likes(x,y))>,TNS=pres] -> 'likes'


P[+to] -> 'to'
P[] -> 'does'
P[] -> 'the'
P[] -> 'is'